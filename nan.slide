eg - The NaN Detective
For people working on machine learning systems using Go

Yi Wang
yi.wang.2005@gmail.com
http://cxwangyi.wordpress.org/


* NaN

When we notice NaN's, we have no idea where were they generated.

- NaN's could be generated by many operations

    0/0, ±∞/±∞,
    0 * ±∞, ±∞ * 0
    ∞ + (−∞), (−∞) + ∞
    ∞ - (−∞), (−∞) - ∞
    pow(0,0), pow(1,∞), pow(∞,0)
    sqrt(-x)
    log(-x)
    arcsin(-1.1), arcsin(1.1)

- NaN's propagate through most operations


* Example

The following example computes the KL-divergence of two discrete distributions:

.play example/kl1.go /START OMIT/,/END OMIT/


* Panic Check

Go programs support `panic`s.  By adding panic checks for NaN's,

.play example/kl2.go  /START OMIT/,/END OMIT/

we get the following stack trace that shows the reason of NaN is in function `main`.

    2009/11/10 23:00:00 p (0.5) or q (0) <= 0
    panic: p (0.5) or q (0) <= 0
    goroutine 1 [running]:
    log.Panicf(0x187550, 0x15, 0x1042be58, 0x2, 0x2, 0x104382f0)
            /usr/local/go/src/log/log.go:327 +0x100
    main.pmi(0x0, 0x3fe00000, 0x0, 0x0, 0xfefa39ef, 0xbfe62e42)
            /tmp/sandbox875011181/main.go:12 +0x200
    main.kl(0x1042bf10, 0x2, 0x2, 0x1042bf00, 0x2, 0x2, 0x0, 0x0)
            /tmp/sandbox875011181/main.go:20 +0xc0
    main.main()
            /tmp/sandbox875011181/main.go:29 +0x1c0

* General Solution

A general solution is to add panic check in `math.Log`, other than `pmi`:

